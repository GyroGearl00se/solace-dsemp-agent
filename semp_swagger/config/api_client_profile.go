
/*
 * SEMP (Solace Element Management Protocol)
 *
 * SEMP (starting in `v2`) is a RESTful API for configuring, monitoring, and administering a Solace PubSub+ broker. This specification defines the following API:   API|Base Path|Purpose :---|:---|:--- Configuration|/SEMP/v2/config|Reading and writing configuration    The following APIs are also available:   API|Base Path|Purpose :---|:---|:--- Action|/SEMP/v2/action|Performing actions Monitoring|/SEMP/v2/monitor|Querying operational state    For tutorials, architectural and protocol design documentation, and other information about the SEMP API, consult the [SEMP documentation](https://docs.solace.com/Admin/SEMP/Using-SEMP.htm) on the Solace website. The SEMP API specifications are also [available for download](https://solace.com/downloads/).  If you need additional support, please contact us at [support@solace.com](mailto:support@solace.com).
 *
 * API version: 2.48
 * Contact: support@solace.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ClientProfileApiService service
/*
ClientProfileApiService Create a Client Profile object.
Create a Client Profile object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.   Attribute|Identifying|Const|Required|Read-Only|Deprecated :---|:---:|:---:|:---:|:---:|:---: allowCutThroughForwardingEnabled|||||x apiQueueManagementCopyFromOnCreateName|||||x apiTopicEndpointManagementCopyFromOnCreateName|||||x clientProfileName|x|x|x|| msgVpnName|x|||x| tcpCongestionWindowSize|||||x tcpMaxWindowSize|||||x    The following attributes in the request may only be provided in certain combinations with other attributes:   Class|Attribute|Requires|Conflicts :---|:---|:---|:--- MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|clearPercent|setPercent| MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|setPercent|clearPercent| MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|setValue|clearValue|clearPercent, setPercent    The minimum access scope/level required to perform this operation is \&quot;global/mesh-manager\&quot;. A different access scope/level may also be required when providing values for specific attributes.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The Client Profile object&#x27;s attributes.
 * @param msgVpnName The name of the Message VPN.
 * @param optional nil or *ClientProfileApiCreateMsgVpnClientProfileOpts - Optional Parameters:
     * @param "OpaquePassword" (optional.String) -  Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
     * @param "Select_" (optional.Interface of []string) -  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
@return MsgVpnClientProfileResponse
*/

type ClientProfileApiCreateMsgVpnClientProfileOpts struct {
    OpaquePassword optional.String
    Select_ optional.Interface
}

func (a *ClientProfileApiService) CreateMsgVpnClientProfile(ctx context.Context, body MsgVpnClientProfile, msgVpnName string, localVarOptionals *ClientProfileApiCreateMsgVpnClientProfileOpts) (MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MsgVpnClientProfileResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OpaquePassword.IsSet() {
		localVarQueryParams.Add("opaquePassword", parameterToString(localVarOptionals.OpaquePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MsgVpnClientProfileResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ClientProfileApiService Delete a Client Profile object.
Delete a Client Profile object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.  The minimum access scope/level required to perform this operation is \&quot;global/mesh-manager\&quot;.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
@return SempMetaOnlyResponse
*/
func (a *ClientProfileApiService) DeleteMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string) (SempMetaOnlyResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue SempMetaOnlyResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", fmt.Sprintf("%v", clientProfileName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ClientProfileApiService Get a Client Profile object.
Get a Client Profile object.  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.   Attribute|Identifying|Deprecated :---|:---:|:---: allowCutThroughForwardingEnabled||x apiQueueManagementCopyFromOnCreateName||x apiTopicEndpointManagementCopyFromOnCreateName||x clientProfileName|x| msgVpnName|x| tcpCongestionWindowSize||x tcpMaxWindowSize||x    The minimum access scope/level required to perform this operation is \&quot;vpn/read-only\&quot;.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @param optional nil or *ClientProfileApiGetMsgVpnClientProfileOpts - Optional Parameters:
     * @param "OpaquePassword" (optional.String) -  Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
     * @param "Select_" (optional.Interface of []string) -  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
@return MsgVpnClientProfileResponse
*/

type ClientProfileApiGetMsgVpnClientProfileOpts struct {
    OpaquePassword optional.String
    Select_ optional.Interface
}

func (a *ClientProfileApiService) GetMsgVpnClientProfile(ctx context.Context, msgVpnName string, clientProfileName string, localVarOptionals *ClientProfileApiGetMsgVpnClientProfileOpts) (MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MsgVpnClientProfileResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", fmt.Sprintf("%v", clientProfileName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OpaquePassword.IsSet() {
		localVarQueryParams.Add("opaquePassword", parameterToString(localVarOptionals.OpaquePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MsgVpnClientProfileResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ClientProfileApiService Get a list of Client Profile objects.
Get a list of Client Profile objects.  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.   Attribute|Identifying|Deprecated :---|:---:|:---: allowCutThroughForwardingEnabled||x apiQueueManagementCopyFromOnCreateName||x apiTopicEndpointManagementCopyFromOnCreateName||x clientProfileName|x| msgVpnName|x| tcpCongestionWindowSize||x tcpMaxWindowSize||x    The minimum access scope/level required to perform this operation is \&quot;vpn/read-only\&quot;.  The maximum number of objects that can be returned in a single page is 100.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param optional nil or *ClientProfileApiGetMsgVpnClientProfilesOpts - Optional Parameters:
     * @param "Count" (optional.Int32) -  Limit the count of objects in the response. See the documentation for the &#x60;count&#x60; parameter.
     * @param "Cursor" (optional.String) -  The cursor, or position, for the next page of objects. See the documentation for the &#x60;cursor&#x60; parameter.
     * @param "OpaquePassword" (optional.String) -  Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
     * @param "Where" (optional.Interface of []string) -  Include in the response only objects where certain conditions are true. See the the documentation for the &#x60;where&#x60; parameter.
     * @param "Select_" (optional.Interface of []string) -  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
@return MsgVpnClientProfilesResponse
*/

type ClientProfileApiGetMsgVpnClientProfilesOpts struct {
    Count optional.Int32
    Cursor optional.String
    OpaquePassword optional.String
    Where optional.Interface
    Select_ optional.Interface
}

func (a *ClientProfileApiService) GetMsgVpnClientProfiles(ctx context.Context, msgVpnName string, localVarOptionals *ClientProfileApiGetMsgVpnClientProfilesOpts) (MsgVpnClientProfilesResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MsgVpnClientProfilesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpaquePassword.IsSet() {
		localVarQueryParams.Add("opaquePassword", parameterToString(localVarOptionals.OpaquePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Where.IsSet() {
		localVarQueryParams.Add("where", parameterToString(localVarOptionals.Where.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MsgVpnClientProfilesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ClientProfileApiService Replace a Client Profile object.
Replace a Client Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions [here](https://docs.solace.com/Admin/SEMP/SEMP-API-Archit.htm#HTTP_Methods).  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.   Attribute|Identifying|Const|Read-Only|Deprecated :---|:---:|:---:|:---:|:---: allowCutThroughForwardingEnabled||||x apiQueueManagementCopyFromOnCreateName||||x apiTopicEndpointManagementCopyFromOnCreateName||||x clientProfileName|x|x|| msgVpnName|x||x| tcpCongestionWindowSize||||x tcpMaxWindowSize||||x    The following attributes in the request may only be provided in certain combinations with other attributes:   Class|Attribute|Requires|Conflicts :---|:---|:---|:--- MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|clearPercent|setPercent| MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|setPercent|clearPercent| MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|setValue|clearValue|clearPercent, setPercent    The minimum access scope/level required to perform this operation is determined by the attributes provided in the request. In addition, a minimum access scope/level of \&quot;global/mesh-manager\&quot; is required if this operation creates an object.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The Client Profile object&#x27;s attributes.
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @param optional nil or *ClientProfileApiReplaceMsgVpnClientProfileOpts - Optional Parameters:
     * @param "OpaquePassword" (optional.String) -  Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
     * @param "Select_" (optional.Interface of []string) -  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
@return MsgVpnClientProfileResponse
*/

type ClientProfileApiReplaceMsgVpnClientProfileOpts struct {
    OpaquePassword optional.String
    Select_ optional.Interface
}

func (a *ClientProfileApiService) ReplaceMsgVpnClientProfile(ctx context.Context, body MsgVpnClientProfile, msgVpnName string, clientProfileName string, localVarOptionals *ClientProfileApiReplaceMsgVpnClientProfileOpts) (MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MsgVpnClientProfileResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", fmt.Sprintf("%v", clientProfileName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OpaquePassword.IsSet() {
		localVarQueryParams.Add("opaquePassword", parameterToString(localVarOptionals.OpaquePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MsgVpnClientProfileResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ClientProfileApiService Update a Client Profile object.
Update a Client Profile object. Any attribute missing from the request will be left unchanged.  Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.   Attribute|Identifying|Const|Read-Only|Deprecated :---|:---:|:---:|:---:|:---: allowCutThroughForwardingEnabled||||x apiQueueManagementCopyFromOnCreateName||||x apiTopicEndpointManagementCopyFromOnCreateName||||x clientProfileName|x|x|| msgVpnName|x||x| tcpCongestionWindowSize||||x tcpMaxWindowSize||||x    The following attributes in the request may only be provided in certain combinations with other attributes:   Class|Attribute|Requires|Conflicts :---|:---|:---|:--- MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|clearPercent|setPercent| MsgVpnClientProfileEventClientProvisionedEndpointSpoolUsageThreshold|setPercent|clearPercent| MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEgressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEgressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventEndpointCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventIngressFlowCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventIngressFlowCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceSmfConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventServiceWebConnectionCountPerClientUsernameThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventSubscriptionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventSubscriptionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactedSessionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactedSessionCountThreshold|setValue|clearValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|clearPercent|setPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|clearValue|setValue|clearPercent, setPercent MsgVpnClientProfileEventTransactionCountThreshold|setPercent|clearPercent|clearValue, setValue MsgVpnClientProfileEventTransactionCountThreshold|setValue|clearValue|clearPercent, setPercent    The minimum access scope/level required to perform this operation is determined by the attributes provided in the request.  This has been available since 2.0.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The Client Profile object&#x27;s attributes.
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @param optional nil or *ClientProfileApiUpdateMsgVpnClientProfileOpts - Optional Parameters:
     * @param "OpaquePassword" (optional.String) -  Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See the documentation for the &#x60;opaquePassword&#x60; parameter.
     * @param "Select_" (optional.Interface of []string) -  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the &#x60;select&#x60; parameter.
@return MsgVpnClientProfileResponse
*/

type ClientProfileApiUpdateMsgVpnClientProfileOpts struct {
    OpaquePassword optional.String
    Select_ optional.Interface
}

func (a *ClientProfileApiService) UpdateMsgVpnClientProfile(ctx context.Context, body MsgVpnClientProfile, msgVpnName string, clientProfileName string, localVarOptionals *ClientProfileApiUpdateMsgVpnClientProfileOpts) (MsgVpnClientProfileResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Patch")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue MsgVpnClientProfileResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", fmt.Sprintf("%v", msgVpnName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", fmt.Sprintf("%v", clientProfileName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OpaquePassword.IsSet() {
		localVarQueryParams.Add("opaquePassword", parameterToString(localVarOptionals.OpaquePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v MsgVpnClientProfileResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v SempMetaOnlyResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
